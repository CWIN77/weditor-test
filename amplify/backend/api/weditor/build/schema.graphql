
type Request {
  id: ID!
  title: String!
  explane: String!
  pay: Int!
  videoUrl: String!
  downloadUrl: String!
  setting: Setting!
  owner: User!
  keepUser: [User]!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Setting {
  length: String!
  ratio: String!
  tag: [String]!
  subtitle: Int!
}

type User {
  id: ID!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input SettingInput {
  length: String!
  ratio: String!
  tag: [String]!
  subtitle: Int!
}

input UserInput {
  id: ID
}

type ModelRequestConnection {
  items: [Request]!
  nextToken: String
}

input ModelRequestFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  explane: ModelStringInput
  pay: ModelIntInput
  videoUrl: ModelStringInput
  downloadUrl: ModelStringInput
  and: [ModelRequestFilterInput]
  or: [ModelRequestFilterInput]
  not: ModelRequestFilterInput
}

type Query {
  getRequest(id: ID!): Request
  listRequests(filter: ModelRequestFilterInput, limit: Int, nextToken: String): ModelRequestConnection
}

input ModelRequestConditionInput {
  title: ModelStringInput
  explane: ModelStringInput
  pay: ModelIntInput
  videoUrl: ModelStringInput
  downloadUrl: ModelStringInput
  and: [ModelRequestConditionInput]
  or: [ModelRequestConditionInput]
  not: ModelRequestConditionInput
}

input CreateRequestInput {
  id: ID
  title: String!
  explane: String!
  pay: Int!
  videoUrl: String!
  downloadUrl: String!
  setting: SettingInput!
  owner: UserInput!
  keepUser: [UserInput]!
}

input UpdateRequestInput {
  id: ID!
  title: String
  explane: String
  pay: Int
  videoUrl: String
  downloadUrl: String
  setting: SettingInput
  owner: UserInput
  keepUser: [UserInput]
}

input DeleteRequestInput {
  id: ID!
}

type Mutation {
  createRequest(input: CreateRequestInput!, condition: ModelRequestConditionInput): Request
  updateRequest(input: UpdateRequestInput!, condition: ModelRequestConditionInput): Request
  deleteRequest(input: DeleteRequestInput!, condition: ModelRequestConditionInput): Request
}

type Subscription {
  onCreateRequest: Request @aws_subscribe(mutations: ["createRequest"])
  onUpdateRequest: Request @aws_subscribe(mutations: ["updateRequest"])
  onDeleteRequest: Request @aws_subscribe(mutations: ["deleteRequest"])
}

